reference:
UA - up arrow
DA - down arrow
LA - left arrow
RA - right arrow
SP - space
EN - enter
DEL - delete (backspace for windows)

Exercise 1.1:

1) 	e m a c s SP e x e r 1 . h t m l EN
2) 	C-s P U B L I C EN
3)	C-s l a b EN C-s l a b o r a t o r y EN
4)	C-s s e l f - r e f EN
5)	C-s a r r o w EN
6)	C-e
7)	C-a

8)	 There are many built-in commands to make cursor movement much faster, 
	 that were used in the preceding steps:
	 C-s:  Enter a text string. Search from current cursor position forward 
	 until text string is found (for steps 2-5).
	 C-e:  Move the cursor to the end of the current line (for step 6).
	 C-a:  Move the cursor to the beginning of the current line (for step 7).

9)	 Nope.
10)	 Yes.

------------

Exercise 1.2:

1)	 Yes.
2)	 M-g g 1 8 EN C-k
3)	 C-" D E L EN C-u M-;
4)	 C-s H T M L _ EN C-s H T M L _ EN C-u M-;
5)	 C-s < ! - - EN C-s < ! - - EN C-u M-;

------------

Exercise 1.3:

1)	 Yes.
2)	 M-% A s s i g n m e n t SP 1 EN A s s i g n m e n t 3 7 EN y y n
3)	 M-% U T F - 8 EN U S - A S C I I EN y n
4)    	 M-< C-s < / o l > EN C-a C-o

------------

Exercise 1.4:

1)	 Yes.
2)	 Yes.
3)	 C-s - < ! C-a RA C-SP C-e M-w M-< C-s L a EN DA DA C-y
4)	 C-s - < ! C-s - < ! C-a RA C-SP C-e M-w M-< C-s H o m e EN DA SP C-y EN
	 C-s - < ! - C-s - < ! C-s - < ! C-a RA C-SP C-e DA DA M-w M-< C-s S u b m i t 
	 t EN UA EN UA EN C-y 
5)	 M-< C-s - - - SP C-a C-SP M-> DEL
6)	 C-x u
7)	 M-< C-s - - - SP C-a < ! - - SP M-% -- EN - SP - n y y y y y y y y DA - - >
8)	 M-<" M-% < o l > EN < O l > y y y y y y y

------------

Exercise 1.5:

1)	 e m a c s EN M-x m k d i r EN j u n k EN
2)	 c d EN j u n k EN C-x C-f h e l l o . c EN
	 (copy and paste the source code into hello.c)
	 C-x C-s 
3)	 M-x c o m p i l e EN DEL DEL DEL DEL DEL DEL DEL DEL g c c SP - o SP h i SP 
	 h e l l o . c EN
	 // replace "make -k" with "gcc -o hello hello.c" as using make -k 
	 // does not work.
4)	 M-x c o m p i l e EN . / h i EN C-x 0 EN C-x C-w h e l l o - o u t EN
5)	 e m a c s SP h e l l o - o u t EN
	 C-x h M-x a p p e n d - t o - f i l e EN
	 DEL DEL DEL DEL DEL C S 3 5 L b a c k u p / k e y 1 . t x t EN
	 (see bottom for appended text).

------------

Exercise 1.6:

1) C-x b EN
2) e v a l ( r a n d o m ) C-j
3) ( s e t q SP x SP ( r a n d o m ) ) C-j ( s e t q SP y SP 
   ( r a n d o m )) C-j
4) ( * SP x SP y ) C-j
5) M-: ( * SP x SP y ) EN
   // we get the same result
6) No. Computers cannot generate truly random numbers. Random number 
   generators use algorithms and seeds in 
   order to generate numbers that appear random, i.e. psuedo-random 
   numbers.
7) The product of two integers is correct as long as no overflow or 
   underflow occurs. To calculate the probability that a product is 
   incorrect, I constructed a graph, with the x-axis being the variable 
   x and the y-axis being the variable y. I created a function 
   xy = 2^32 - 1. I calculated the area under the function, and 
   compared it with the area above the function, within a square 
   defined by (0,0) and (2^32 - 1, 2^32 - 1). The result may be 
   surprising. Assuming a 32-bit system, the chances that an
   incorrect result is produced is actually more than 99%.
-------------

appended text from exercise 1.5.5:
-*- mode: compilation; default-directory: "~/junk/" -*-
Compilation started at Fri Oct  6 17:25:24

./hello
#include <stdio.h>
int
main (void)
{
  char n = '\n';
  char b = '\\';
  char q = '"';
  char const *p = "#include <stdio.h>%cint%cmain (void)%c{%c  char n = '%cn';%c  char b = '%c%c';%c  char q = '%c';%c  char const *p = %c%s%c;%c  printf (p, n, n, n, n, b, n, b, b, n, q, n, q, p, q, n, n, n, n);%c  return 0;%c}%c";
  printf (p, n, n, n, n, b, n, b, b, n, q, n, q, p, q, n, n, n, n);
  return 0;
}

Compilation finished at Fri Oct  6 17:25:24
